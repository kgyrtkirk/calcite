# winagg.iq - Unit tests for windowed aggregation, verified on Postgres
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to you under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
!use post
!set outputformat mysql

# WTF
select * from emp;
+-------+--------+--------+
| ENAME | DEPTNO | GENDER |
+-------+--------+--------+
| Adam  |     50 | M      |
| Alice |     30 | F      |
| Bob   |     10 | M      |
| Eric  |     20 | M      |
| Eve   |     50 | F      |
| Grace |     60 | F      |
| Jane  |     10 | F      |
| Susan |     30 | F      |
| Wilma |        | F      |
+-------+--------+--------+
(9 rows)

!ok

# Multiple window functions sharing a single window
select ename,deptno,gender,count(*) over(partition by gender order by ename) as sum_row_by_gender,
  count(*) over(partition by deptno order by ename) as sum_row_by_deptno,
  sum(deptno) over(partition by gender order by ename) as sum_deptno_by_gender,
  sum(deptno) over(partition by deptno order by ename) as sum_deptno_by_deptno
from emp
order by sum_deptno_by_gender, sum_deptno_by_deptno;
+-------+--------+--------+-------------------+-------------------+----------------------+----------------------+
| ENAME | DEPTNO | GENDER | SUM_ROW_BY_GENDER | SUM_ROW_BY_DEPTNO | SUM_DEPTNO_BY_GENDER | SUM_DEPTNO_BY_DEPTNO |
+-------+--------+--------+-------------------+-------------------+----------------------+----------------------+
| Alice |     30 | F      |                 1 |                 1 |                   30 |                   30 |
| Adam  |     50 | M      |                 1 |                 1 |                   50 |                   50 |
| Bob   |     10 | M      |                 2 |                 1 |                   60 |                   10 |
| Eric  |     20 | M      |                 3 |                 1 |                   80 |                   20 |
| Eve   |     50 | F      |                 2 |                 2 |                   80 |                  100 |
| Grace |     60 | F      |                 3 |                 1 |                  140 |                   60 |
| Jane  |     10 | F      |                 4 |                 2 |                  150 |                   20 |
| Susan |     30 | F      |                 5 |                 2 |                  180 |                   60 |
| Wilma |        | F      |                 6 |                 1 |                  180 |                      |
+-------+--------+--------+-------------------+-------------------+----------------------+----------------------+
(9 rows)

!ok
EnumerableSort(sort0=[$5], sort1=[$6], dir0=[ASC], dir1=[ASC])
  EnumerableCalc(expr#0..8=[{inputs}], expr#9=[0], expr#10=[>($t4, $t9)], expr#11=[CAST($t5):INTEGER], expr#12=[null], expr#13=[CASE($t10, $t11, $t12)], expr#14=[>($t7, $t9)], expr#15=[CAST($t8):INTEGER], expr#16=[CASE($t14, $t15, $t12)], proj#0..3=[{exprs}], SUM_ROW_BY_DEPTNO=[$t6], SUM_DEPTNO_BY_GENDER=[$t13], SUM_DEPTNO_BY_DEPTNO=[$t16])
    EnumerableWindow(window#0=[window(partition {2} order by [0] range between UNBOUNDED PRECEDING and CURRENT ROW aggs [COUNT(), COUNT($1), $SUM0($1)])], window#1=[window(partition {1} order by [0] range between UNBOUNDED PRECEDING and CURRENT ROW aggs [COUNT(), COUNT($1), $SUM0($1)])])
      EnumerableUnion(all=[true])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Jane'], expr#2=[10], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Bob'], expr#2=[10], expr#3=['M'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Eric'], expr#2=[20], expr#3=['M'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Susan'], expr#2=[30], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Alice'], expr#2=[30], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Adam'], expr#2=[50], expr#3=['M'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Eve'], expr#2=[50], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Grace'], expr#2=[60], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
        EnumerableCalc(expr#0=[{inputs}], expr#1=['Wilma'], expr#2=[null], expr#3=['F'], EXPR$0=[$t1], EXPR$1=[$t2], EXPR$2=[$t3])
          EnumerableValues(tuples=[[{ 0 }]])
!plan


# End winagg.iq
